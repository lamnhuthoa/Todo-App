{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst todoSlice = createSlice({\n  name: 'todoList',\n  initialState: {\n    status: 'idle',\n    todos: []\n  },\n  // [] => { status: '', todos: [] }\n  reducers: {\n    addTodo: (state, action) => {\n      // mutation || IMMER\n      state.push(action.payload);\n    },\n    toggleTodoStatus: (state, action) => {\n      const currentTodo = state.find(todo => todo.id === action.payload);\n\n      if (currentTodo) {\n        currentTodo.completed = !currentTodo.completed;\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchTodos.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchTodos.fulfilled, (state, action) => {\n      state.todos = action.payload;\n      state.status = 'idle';\n    });\n  }\n});\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  const res = await fetch(\"/api/todos\");\n  const data = res.json();\n  return data.todos;\n});\nexport const addNewTodo = createAsyncThunk('todos/addNewTodo', async newTodo => {\n  const res = await fetch(\"/api/todos\", {\n    method: 'POST',\n    body: JSON.stringify(newTodo)\n  });\n  const data = await res.json();\n  return data.todos;\n});\n/**\r\n * => todos/fetchTodos/pending\r\n * => todos/fetchTodos/fulfilled\r\n * => todos/fetchTodos/rejected \r\n * \r\n * */\n\nexport default todoSlice; //action (object) va action creator () => { return action }\n//thunk action (function) va thunk action creator () => { return thunk action }\n// export function addTodos(todo) { //thunk function - thunk action\n//     return function addTodosThunk(dispatch, getState) {\n//     }\n// }","map":{"version":3,"names":["createSlice","createAsyncThunk","todoSlice","name","initialState","status","todos","reducers","addTodo","state","action","push","payload","toggleTodoStatus","currentTodo","find","todo","id","completed","extraReducers","builder","addCase","fetchTodos","pending","fulfilled","res","fetch","data","json","addNewTodo","newTodo","method","body","JSON","stringify"],"sources":["C:/Users/Admin/Desktop/todo-app/src/components/TodoList/todoListSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nconst todoSlice = createSlice({\r\n    name: 'todoList',\r\n    initialState: { status: 'idle', todos: [] }, // [] => { status: '', todos: [] }\r\n    reducers: {\r\n        addTodo: (state, action) => {\r\n            // mutation || IMMER\r\n            state.push(action.payload)\r\n        },\r\n        toggleTodoStatus: (state, action) => {\r\n            const currentTodo = state.find(todo => todo.id === action.payload);\r\n            if (currentTodo) {\r\n                currentTodo.completed = !currentTodo.completed;\r\n            }\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodos.pending, (state, action) => {\r\n            state.status = 'loading';\r\n        }).addCase(fetchTodos.fulfilled, (state, action) => {\r\n            state.todos = action.payload;\r\n            state.status = 'idle';\r\n        })\r\n    }\r\n});\r\n\r\nexport const fetchTodos = createAsyncThunk(\r\n    'todos/fetchTodos',\r\n    async () => {\r\n        const res = await fetch(\"/api/todos\");\r\n        const data = res.json();\r\n        return data.todos;        \r\n    }\r\n)\r\n\r\nexport const addNewTodo = createAsyncThunk(\r\n    'todos/addNewTodo',\r\n    async (newTodo) => {\r\n        const res = await fetch(\"/api/todos\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(newTodo)\r\n        })\r\n        const data = await res.json();\r\n        return data.todos;\r\n    }\r\n)\r\n\r\n/**\r\n * => todos/fetchTodos/pending\r\n * => todos/fetchTodos/fulfilled\r\n * => todos/fetchTodos/rejected \r\n * \r\n * */  \r\n\r\nexport default todoSlice;\r\n\r\n//action (object) va action creator () => { return action }\r\n//thunk action (function) va thunk action creator () => { return thunk action }\r\n\r\n// export function addTodos(todo) { //thunk function - thunk action\r\n//     return function addTodosThunk(dispatch, getState) {\r\n        \r\n//     }\r\n// }"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC1BG,IAAI,EAAE,UADoB;EAE1BC,YAAY,EAAE;IAAEC,MAAM,EAAE,MAAV;IAAkBC,KAAK,EAAE;EAAzB,CAFY;EAEmB;EAC7CC,QAAQ,EAAE;IACNC,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACxB;MACAD,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;IACH,CAJK;IAKNC,gBAAgB,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;MACjC,MAAMI,WAAW,GAAGL,KAAK,CAACM,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACE,OAAtC,CAApB;;MACA,IAAIE,WAAJ,EAAiB;QACbA,WAAW,CAACI,SAAZ,GAAwB,CAACJ,WAAW,CAACI,SAArC;MACH;IACJ;EAVK,CAHgB;EAe1BC,aAAa,EAAEC,OAAO,IAAI;IACtBA,OAAO,CAACC,OAAR,CAAgBC,UAAU,CAACC,OAA3B,EAAoC,CAACd,KAAD,EAAQC,MAAR,KAAmB;MACnDD,KAAK,CAACJ,MAAN,GAAe,SAAf;IACH,CAFD,EAEGgB,OAFH,CAEWC,UAAU,CAACE,SAFtB,EAEiC,CAACf,KAAD,EAAQC,MAAR,KAAmB;MAChDD,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACE,OAArB;MACAH,KAAK,CAACJ,MAAN,GAAe,MAAf;IACH,CALD;EAMH;AAtByB,CAAD,CAA7B;AAyBA,OAAO,MAAMiB,UAAU,GAAGrB,gBAAgB,CACtC,kBADsC,EAEtC,YAAY;EACR,MAAMwB,GAAG,GAAG,MAAMC,KAAK,CAAC,YAAD,CAAvB;EACA,MAAMC,IAAI,GAAGF,GAAG,CAACG,IAAJ,EAAb;EACA,OAAOD,IAAI,CAACrB,KAAZ;AACH,CANqC,CAAnC;AASP,OAAO,MAAMuB,UAAU,GAAG5B,gBAAgB,CACtC,kBADsC,EAEtC,MAAO6B,OAAP,IAAmB;EACf,MAAML,GAAG,GAAG,MAAMC,KAAK,CAAC,YAAD,EAAe;IAClCK,MAAM,EAAE,MAD0B;IAElCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,OAAf;EAF4B,CAAf,CAAvB;EAIA,MAAMH,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;EACA,OAAOD,IAAI,CAACrB,KAAZ;AACH,CATqC,CAAnC;AAYP;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeJ,SAAf,C,CAEA;AACA;AAEA;AACA;AAEA;AACA"},"metadata":{},"sourceType":"module"}